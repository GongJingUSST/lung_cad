[log]                                       ; logging system parameters
logini = "/Users/gianluca/Dev/MIG/LUNG/lung_cad/etc/cadlog_glf_mac.ini"            ; logging system configuration file

[general]                                   ; general setup parameters
dir_out	= "/Volumes/CHRONOSHD/MIG/LUNG/Work/data/results/"
db_file = "/Volumes/CHRONOSHD/MIG/LUNG/Work/data/KAGGLE17.db"
queue_len = 1                               ; how many unprocessed entries to read from database file
retry_read = 10                             ; polling interval in seconds for unprocessed entries
retry_write = 10                            ; polling interval in seconds for signaling an entry as processed

[io]                                        ; dicom io parameters
dll = "/Users/gianluca/Dev/MIG/LUNG/lung_cad/build/libmigdicom.so"      ; dicom io dll to use

resample = 1                                ; shall we resample input stack
target_z_resolution = 0.6                 ; if resample is 1 use this as target z resolution
dump = 1                                    ; shall we dump original / resampled stack to a mat file

slice_limit = 900                           ;max number of slices to load



[io/voi_lut]

type = 0                                     ; 0 - use wc and ww stored inside DICOM file
                                             ; 1 - force use of exmplicit wc and ww
                                             ; 2 - compute window using min-max
                                             ; 3 - compute window using min-max, ignore extreme values
                                             ; 4 - compute window using histogram, ignore "ignore_perc" percent
wc = -600                                    ; forced wc
ww = 1600                                    ; forced ww
;da provare -500,1400 ; -400,1600
ignore_perc = 10.0                           ; ignore "ignore_perc" when using histogram window


[segmentation]                              ; segmentation parameters
perform_segmentation = 1                    ; shall we perform segmentation
dll = "/Users/gianluca/Dev/MIG/LUNG/lung_cad/build/libmigseg.so"        ; segmentation dll to use

[segmentation/threshold]

filter_inplace = 0                           ; shall original stack be filtered too
filter = 1                                   ; filter data slice by slice before performing segmentation
                                             ; 0 - use no filter
                                             ; 1 - median cross 3x3
                                             ; 2 - median cross 5x5
                                             ; 3 - median box 3x3
                                             ; 4 - median box 5x5
                                             ; 5 - tomita 3
                                             ; 6 - tomita 5
                                             ; 7 - nagao 5
                                             ; 8 - nagao 7

[segmentation/threshold]                    ; segmentation thresholding parameters
g0 = -1000                                  ; start threshold - Hounsfield Units
g1 = 0                                      ; end threshold - Hounsfield Units
g2 = -500                                   ; fallback threshold - Hounsfield Units

[segmentation/lung_separate]                ; left - right lung separation parameters
sep_min_area      	= 0
sep_accum_thr_ini 	= 3
sep_accum_thr_size_max  = 0.60

[segmentation/debug]                                            ; segemntation debugging
dump = 32                                                   ; shall we dump segmentation steps' images

; Segemntation dump values are :
; MIG_SEG_DUMP_PASS1      0X0001 = 1
; MIG_SEG_DUMP_PASS2      0X0002 = 
; MIG_SEG_DUMP_PASS3      0X0004
; MIG_SEG_DUMP_PASS4      0X0008
; MIG_SEG_DUMP_PASS5      0X0010
; MIG_SEG_DUMP_FINAL      0X0020
; Or values to get various segmentation steps. For example to get all passes :
; 0x0001 | 0X0002 | 0X0004 | 0X0008 | 0X0010 | 0X0020 = 
; 1 + 2 + 4 + 8 + 16 + 32 = 63

dir_dump = "/Volumes/CHRONOSHD/MIG/LUNG/Work/data/dump/"                   ; directory where to dump segementation steps' images


[detection]                                 ; detection parameters
perform_detection = 1                       ; shall we perform detection
dll = "/Users/gianluca/Dev/MIG/LUNG/lung_cad/build/libmigdet_3d.so"     ; detection dll to use

[detection/radial]                              ; fast radial parameters
radii = { 3.0 , 5.0 , 7.0 , 9.0 }         ; fast radial list of radii ( in pixels )
is_thr_percent_of_max = 0 						; is following threshold parameter interpreted as percentage of maximum fast radial
												; response or is it a flat threshold
threshold = 0.03                                ; fast radial response threshold ( percentage or flat )
beta_threshold = 0.1							; gradient magnitude threshold

[detection/sspace]                              ; scale space parameters
spacing = 0                                     ; how to calculate sigmas' spacing : 0 geometric , 1 arithmetic progression
increment = 3                                 ; if spacing is 1 this gives the step increment
min_nod_diam = 2.6                              ; minimum nodule diameters we are looking for ( in mm )
max_nod_diam = 32.0                             ; maximum nodule diameters we are looking for ( in mm )
threshold = 0.0                                 ; threshold for local maxima detection

[detection/debug]                               ; detection debugging
dump = 1                                        ; shall we dump detection steps' images
dir_dump = "/Volumes/CHRONOSHD/MIG/LUNG/Work/data/dump/"         ; directory where to dump detection steps' images

[fpr1]
perform_fpr1 = 0                                ; shall we perform fpr1
dll = "/Users/gianluca/Dev/MIG/LUNG/lung_cad/build/libmigfpr_1.so"           ; fpr1 dll to use

; PARAMETERS ARE FOR FPR1 OFF
delta_tolerance = 4.0                          ; fpr1 x/y distance tolerance in pixels
max_scan_distance = 3.0                         ; fpr1 z distance in slices

max_obj_length = 13                             ; maximum object length along z axis

max_angle_l2  = 100.0                            ; allowed centroid angle along z for object of z length 2
max_angle_l3  = 100.0                            ; allowed centroid angle along z for object of z length 3
max_angle_l4  = 100.0                            ; allowed centroid angle along z for object of z length 4
max_angle_l5  = 100.0                            ; allowed centroid angle along z for object of z length 5
max_angle_l6  = 100.0                            ; allowed centroid angle along z for object of z length 6
max_angle_l7  = 100.0                           ; allowed centroid angle along z for object of z length 7
max_angle_l8  = 100.0                            ; allowed centroid angle along z for object of z length 8
max_angle_l9  = 100.0                            ; allowed centroid angle along z for object of z length 9
max_angle_l10 = 100.0                            ; allowed centroid angle along z for object of z length 10

max_obj_volume_low_l2  = 0.0                    ; allowed minium volume for objects of length 2
max_obj_volume_low_l3  = 0.0                    ; allowed minium volume for objects of length 3
max_obj_volume_low_l4  = 0.0                    ; allowed minium volume for objects of length 4
max_obj_volume_low_l5  = 0.0                   ; allowed minium volume for objects of length 5
max_obj_volume_low_l6  = 0.0                   ; allowed minium volume for objects of length 6
max_obj_volume_low_l7  = 0.0                   ; allowed minium volume for objects of length 7
max_obj_volume_low_l8  = 0.0                  ; allowed minium volume for objects of length 8
max_obj_volume_low_l9  = 0.0                  ; allowed minium volume for objects of length 9
max_obj_volume_low_l10 = 0.0                  ; allowed minium volume for objects of length 10

max_obj_volume_high_l2  = 10000.0                 ; allowed maximum volume for objects of length 2
max_obj_volume_high_l3  = 10000.0                 ; allowed maximum volume for objects of length 3
max_obj_volume_high_l4  = 10000.0                 ; allowed maximum volume for objects of length 4
max_obj_volume_high_l5  = 10000.0                 ; allowed maximum volume for objects of length 5
max_obj_volume_high_l6  = 10000.0                 ; allowed maximum volume for objects of length 6
max_obj_volume_high_l7  = 10000.0                 ; allowed maximum volume for objects of length 7
max_obj_volume_high_l8  = 10000.0                 ; allowed maximum volume for objects of length 8
max_obj_volume_high_l9  = 10000.0                 ; allowed maximum volume for objects of length 9
max_obj_volume_high_l10 = 10000.0                 ; allowed maximum volume for objects of length 10

[fpr2]
perform_fpr2 = 1                                ; shall we perform fpr2
dll = "/Users/gianluca/Dev/MIG/LUNG/lung_cad/build/libmigfpr_2_zernike_mip.so"           ; fpr2 dll to use

svm_model_file = "/Volumes/CHRONOSHD/MIG/LUNG/Work/data/LIDC_NEW_models_fold1_zer_1to8/fold1_al3_w0_0_15.model"  ; libsvm format model file
svm_norm_file  = "/Volumes/CHRONOSHD/MIG/LUNG/Work/data/LIDC_NEW_fold1_al3_zer_1to8.norm"                       ; feature normalization parameters

resized_len = 64			; resize crops to this side length for classification
mip_ratio = 0.7				; portion of cut voi to apply mip on
min_pos_labels = 2			; minimum positively classified views needed to assign overall positive label
crop_sizes = 1				; NOT YET USED: used for multires fpr2
mom_orders = {1, 2, 3, 4, 5, 8, 9, 14 }  ;orders indexes to be used for feature extraction (this must be the same as training!)
											;AAA 0 is the first index!







;old FPR2 DATA
; rotations = 24                                  ; number of 2d rotations to perform on each 3d object view
; resized_len = 19                                ; resize crops to this side length for classification

; min_rot_pos_l2  = 13                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
; min_rot_pos_l3  = 13                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
; min_rot_pos_l4  = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
; min_rot_pos_l5  = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
; min_rot_pos_l6  = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
; min_rot_pos_l7  = 13                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
; min_rot_pos_l8  = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
; min_rot_pos_l9  = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
; min_rot_pos_l10 = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
; min_rot_pos_l11 = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
; min_rot_pos_l12 = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
; min_rot_pos_l13 = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
; min_rot_pos_l14 = 12                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
; min_rot_pos_l15 = 11                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght

; min_pos_views_l2  = 2                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
; min_pos_views_l3  = 1                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
; min_pos_views_l4  = 1                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
; min_pos_views_l5  = 1                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
; min_pos_views_l6  = 2                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
; min_pos_views_l7  = 4                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
; min_pos_views_l8  = 5                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
; min_pos_views_l9  = 5                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
; min_pos_views_l10 = 5                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
; min_pos_views_l11 = 5                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
; min_pos_views_l12 = 6                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
; min_pos_views_l13 = 7                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
; min_pos_views_l14 = 6                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
; min_pos_views_l15 = 5                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
